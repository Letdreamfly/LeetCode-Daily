"""
给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。
回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。
回文串不一定是字典当中的单词。

示例1：
输入："tactcoa"
输出：true（排列有"tacocat"、"atcocta"，等等）

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/palindrome-permutation-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""
分析：根据回文字符串的特点分两种情况：
1. 字符串length为偶数，那么字符串里的每一个字符的个数都必须是偶数；
2. 字符串length为基数，那么字符串里的字符个数最多只能有一个奇数，即中间的那个。
以上条件等价于：字符串里的字符个数最多只能有一个奇数。

class Solution(object):
    def canPermutePalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        dict0 = {}
        for ele in s:
            if ele in dict0:
                dict0[ele] += 1
            else:
                dict0[ele] = 1
        odd_num = 0
        for key in dict0.keys():
            if dict0[key] % 2 == 1:
                odd_num += 1
        return odd_num <= 1
