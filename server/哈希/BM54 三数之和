"""
https://www.nowcoder.com/practice/345e2ed5f81d4017bbb8cc6055b0b711
描述
给出一个有n个元素的数组S，S中是否有元素a,b,c满足a+b+c=0？找出数组S中所有满足条件的三元组。

数据范围：0 \le n \le 10000≤n≤1000，数组中各个元素值满足 |val | \le 100∣val∣≤100
空间复杂度：O(n^2)，时间复杂度 O(n^2)

注意：
三元组（a、b、c）中的元素必须按非降序排列。（即a≤b≤c）
解集中不能包含重复的三元组。

知识点1：哈希表
哈希表是一种根据关键码（key）直接访问值（value）的一种数据结构。而这种直接访问意味着只要知道key就能在O(1)O(1)O(1)时间内得到value，
因此哈希表常用来统计频率、快速检验某个元素是否出现过等。

知识点2：双指针
双指针指的是在遍历对象的过程中，不是普通的使用单个指针进行访问，而是使用两个指针（特殊情况甚至可以多个），
两个指针或是同方向访问两个链表、或是同方向访问一个链表（快慢指针）、或是相反方向扫描（对撞指针），从而达到我们需要的目的。

思路：
直接找三个数字之和为某个数，太麻烦了，我们是不是可以拆分一下：如果找到了某个数aaa，要找到与之对应的另外两个数，三数之和为0，那岂不是只要找到另外两个数之和为−a-a−a？这就方便很多了。
因为三元组内部必须是有序的，因此可以优先对原数组排序，这样每次取到一个最小的数为aaa，只需要在后续数组中找到两个之和为−a-a−a就可以了，我们可以用双指针缩小区间。
因为太后面的数字太大了，就不可能为−a-a−a，可以舍弃。

具体做法：
step 1：排除边界特殊情况。
step 2：既然三元组内部要求非降序排列，那我们先得把这个无序的数组搞有序了，使用sort函数优先对其排序。
step 3：得到有序数组后，遍历该数组，对于每个遍历到的元素假设它是三元组中最小的一个，那么另外两个一定在后面。
step 4：需要三个数相加为0，则另外两个数相加应该为上述第一个数的相反数，我们可以利用双指针在剩余的子数组中找有没有这样的数对。双指针指向剩余子数组的首尾，如果二者相加为目标值，那么可以记录，而且二者中间的数字相加可能还会有。
step 5：如果二者相加大于目标值，说明右指针太大了，那就将其左移缩小，相反如果二者相加小于目标值，说明左指针太小了，将其右移扩大，直到两指针相遇，剩余子数组找完了。
注：对于三个数字都要判断是否相邻有重复的情况，要去重。
"""
#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 
# @param num int整型一维数组 
# @return int整型二维数组
#
class Solution:
    def threeSum(self , num: List[int]) -> List[List[int]]:
        # write code here
        res = []
        num.sort()
        if len(num) < 3:
            return res

        for i in range(len(num)-2):
            left = i + 1
            right = len(num)-1
            while left < right:
                if num[i] + num[left] + num[right] == 0:
                    tmp = [num[i], num[left], num[right]]
                    if tmp not in res:
                        res.append(tmp)
                    left += 1
                    right -= 1
                elif num[i] + num[left] + num[right] < 0:
                    left += 1
                elif num[i] + num[left] + num[right] > 0:
                    right -= 1
        return res

                
