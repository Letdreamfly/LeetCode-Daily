"""
https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5
https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=295&tqId=23260&ru=/exam/oj&qru=/ta/format-top101/question-ranking&sourceUrl=%2Fexam%2Foj
"""
描述
在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P mod 1000000007。

要求：
空间复杂度 O(n)，时间复杂度 O(nlogn)

输入描述：
题目保证输入的数组中没有的相同的数字。

方法一：暴力解法
两个for循环。时间复杂度O(n*n)，空间复杂度O(1)。代码略。

方法二：归并排序，分治思想。
https://zhuanlan.zhihu.com/p/166127615
具体做法：
step 1： 划分阶段：将待划分区间从中点划分成两部分，两部分进入递归继续划分，直到子数组长度为1.
step 2： 排序阶段：使用归并排序递归地处理子序列，同时统计逆序对，因为在归并排序中，我们会依次比较相邻两组子数组各个元素的大小，并累计遇到的逆序情况。
而对排好序的两组，右边大于左边时，它大于了左边的所有子序列，基于这个性质我们可以不用每次加1来统计，减少运算次数。
step 3： 合并阶段：将排好序的子序列合并，同时累加逆序对。

#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 
# @param data int整型一维数组 
# @return int整型
#
class Solution:
    def merge_count(self, data, l, m, r):
        left = data[l:m+1]
        right = data[m+1:r+1]
        i, j, k, cnt = 0, 0, l, 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                data[k] = left[i]
                k += 1
                i += 1
            else:
                cnt += (m+1) - (l+i)
                data[k] = right[j]
                k += 1
                j += 1
        while i < len(left):
            data[k] = left[i]
            k += 1
            i += 1
        while j < len(right):
            k += 1
            j += 1
        return cnt

    def merge_sort(self, data, l, r):
        count = 0
        if l < r:
            m = (l+r)//2
            count += self.merge_sort(data, l, m)
            count += self.merge_sort(data, m+1, r)
            count += self.merge_count(data, l, m, r)
        return count%1000000007

    def InversePairs(self , data: List[int]) -> int:
        # write code here
        l = 0
        r = len(data) - 1
        return self.merge_sort(data, l, r)

