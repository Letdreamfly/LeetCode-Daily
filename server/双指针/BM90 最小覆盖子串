"""
https://www.nowcoder.com/practice/c466d480d20c4c7c9d322d12ca7955ac
描述

给出两个字符串 s 和 t，要求在 s 中找出最短的包含 t 中所有字符的连续子串。

数据范围：0 \le |S|,|T| \le100000≤∣S∣,∣T∣≤10000，保证s和t字符串中仅包含大小写英文字母
要求：进阶：空间复杂度 O(n)O(n) ， 时间复杂度 O(n)O(n)
例如：
S ="XDOYEZODEYXNZ"S="XDOYEZODEYXNZ"
T ="XYZ"T="XYZ"
找出的最短子串为"YXNZ""YXNZ".

注意：
如果 s 中没有包含 t 中所有字符的子串，返回空字符串 “”；
满足条件的子串可能有很多，但是题目保证满足条件的最短的子串唯一。

知识点1：滑动窗口
滑动窗口是指在数组、字符串、链表等线性结构上的一段，类似一个窗口，而这个窗口可以依次在上述线性结构上从头到尾滑动，且窗口的首尾可以收缩。
我们在处理滑动窗口的时候，常用双指针来解决，左指针维护窗口左界，右指针维护窗口右界，二者同方向不同速率移动维持窗口。

知识点2：哈希表
哈希表是一种根据关键码（key）直接访问值（value）的一种数据结构。而这种直接访问意味着只要知道key就能在O(1)O(1)O(1)时间内得到value，
因此哈希表常用来统计频率、快速检验某个元素是否出现过等。

思路：
字符串仅包含大小写字母，则字符集是已知且有限的，那这种情况下我们可以考虑快速查找某个元素是否出现过的哈希表——只需要维护一个哈希表，
将字符串T中的字符作为key值，初始化时当字符在T中出现一次则对应的value值减1：
for(int i = 0; i < T.length(); i++)
    //初始化哈希表都为负数，找的时候再加为正
    hash[T.charAt(i)] -= 1;
后续如果在字符串S中找到相应字符就可以将其加回来:
char c = S.charAt(fast);
//目标字符匹配+1
hash[c]++;
然后使用双指针维护滑动窗口，在窗口内，哈希表中value都大于0：
for (int i = 0; i < hash.length; i++) {
    if (hash[i] < 0)
        return false;
}
return true;
这个窗口内出现了T中所有的字符串，此时可以尝试缩小窗口，因为双指针同步向右遍历，因此缩小窗口只能是缩小左界。

具体做法：
step 1：建立哈希表，遍历字符串T，统计各个字符出现的频率，频率计为负数。
step 2：依次遍历字符串S，如果匹配则将哈希表中的相应的字符加1。
step 3：在遍历过程中维护一个窗口，如果哈希表中所有元素都大于0，意味着已经找全了，则窗口收缩向左移动，找最小的窗口，如果不满足这个条件则窗口右移继续匹配。窗口移动的时候需要更新最小窗口，以取得最短子串。
step 4：如果匹配到最后，窗口left（初始为-1）也没有右移，说明没有找到，返回空串即可。
step 5：最后使用字符串截取函数，截取刚刚记录下的窗口即可得到符合条件的最短子串。
"""
#
# 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
#
# 
# @param S string字符串 
# @param T string字符串 
# @return string字符串
#
class Solution:
    def check_valid(self, hash):
        for key, value in hash.items():
            if value < 0:
                return False
        return True 

    def minWindow(self , S: str, T: str) -> str:
        # write code here
        hash = dict()
        for ele in T:
            if ele in hash:
                hash[ele] -= 1
            else:
                hash[ele] = -1
        
        cnt = len(S) + 1
        slow, fast = 0, 0
        left, right = -1, -1
        while fast < len(S):
            if S[fast] in hash:
                hash[S[fast]] += 1
            
            while self.check_valid(hash):
                if cnt > fast - slow + 1:
                    cnt = fast - slow + 1
                    left = slow
                    right = fast
                if S[slow] in hash:
                    hash[S[slow]] -= 1
                slow += 1

            fast += 1
            
        if left == -1:
            return ""
        return S[left:right+1]

        


