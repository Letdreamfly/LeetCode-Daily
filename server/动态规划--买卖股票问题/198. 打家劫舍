"""
https://leetcode.cn/problems/house-robber/
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
     
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

解析方法：
思路参考【买卖股票问题】，把每一步的最优解转化为上一步的最优解和当前步的操作。
设置一个循环，并对当前设置两个状态，0:不偷，1:偷。
首先设置：
dp0[0] = 0
dp1[0] = nums[0]
然后开始遍历，判断每一个的状态：
dp1[i] = max(dp0[i-1]+nums[i], dp1[i-1]-nums[i-1]+nums[i])
dp0[i] = max(dp0[i-1], dp1[i-1])
最后返回结果：
max(dp0[-1], dp1[-1])

"""
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        length = len(nums)
        if length == 0:
            return 0
        elif length == 1:
            return nums[0]

        dp0 = [0 for i in range(length)]
        dp1 = [0 for i in range(length)]
        dp1[0] = nums[0]

        for i in range(1, length):
            dp1[i] = max(dp0[i-1]+nums[i], dp1[i-1]-nums[i-1]+nums[i])
            dp0[i] = max(dp1[i-1], dp0[i-1])
        return max(dp0[-1], dp1[-1])

