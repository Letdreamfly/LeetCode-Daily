"""
https://leetcode.cn/problems/house-robber-ii/
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。
给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。

示例 1：
输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

示例 2：
输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
     
示例 3：
输入：nums = [1,2,3]
输出：3

解析方法：官方解答
https://leetcode.cn/problems/house-robber-ii/solution/da-jia-jie-she-ii-by-leetcode-solution-bwja/
在198. 打家劫舍的基础上增加从第0个还是第1个屋子开始的判断，分两种情况求局部最优解，最终取最大值为全局最优解。
"""
方法1:
class Solution:
    def rob(self, nums: List[int]) -> int:
        def robRange(start: int, end: int) -> int:
            first = nums[start]
            second = max(nums[start], nums[start + 1])
            for i in range(start + 2, end + 1):
                first, second = second, max(first + nums[i], second)
            return second
        
        length = len(nums)
        if length == 1:
            return nums[0]
        elif length == 2:
            return max(nums[0], nums[1])
        else:
            return max(robRange(0, length - 2), robRange(1, length - 1))
            
方法2:
按照上面思路复现：
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        length = len(nums)
        if length == 1:
            return nums[0]
        elif length == 2:
            return max(nums[0], nums[1])
        else:
            dp0 = [0] * (length)
            dp1 = [0] * (length)
            # from 0
            dp0[0] = nums[0]
            dp0[1] = max(nums[0], nums[1])
            for i in range(2, length-1):
                dp0[i] = max(dp0[i-1], dp0[i-2]+nums[i])
            dp1[1] = nums[1]
            dp1[2] = max(nums[1], nums[2])
            for i in range(3, length):
                dp1[i] = max(dp1[i-1], dp1[i-2]+nums[i])

            return max(dp1[-1], dp0[-2])
            

