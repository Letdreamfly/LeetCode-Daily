"""
https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49

描述
定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的 min 函数，输入操作时保证 pop、top 和 min 函数操作时，栈中一定有元素。
此栈包含的方法有：
push(value):将value压入栈中
pop():弹出栈顶元素
top():获取栈顶元素
min():获取栈中最小元素

方法：双栈法（推荐使用）
知识点：栈
栈是一种仅支持在表尾进行插入和删除操作的线性表，这一端被称为栈顶，另一端被称为栈底。
元素入栈指的是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；元素出栈指的是从一个栈删除元素又称作出栈或退栈，
它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。

思路：
我们都知道栈结构的push、pop、top操作都是O(1)O(1)O(1)，但是min函数做不到，于是想到在push的时候就将最小值记录下来，
由于栈先进后出的特殊性，我们可以构造一个单调栈，保证栈内元素都是递增的，栈顶元素就是当前最小的元素。

具体做法：

step 1：使用一个栈记录进入栈的元素，正常进行push、pop、top操作。
step 2：使用另一个栈记录每次push进入的最小值。
step 3：每次push元素的时候与第二个栈的栈顶元素比较，若是较小，则进入第二个栈，若是较大，则第二个栈的栈顶元素再次入栈，因为即便加了一个元素，它依然是最小值。于是，每次访问最小值即访问第二个栈的栈顶。
"""
# -*- coding:utf-8 -*-
class Solution:
    def __init__(self):
        self.s1 = []
        self.s2 = []
    def push(self, node):
        # write code here
        self.s1.append(node)
        if len(self.s2)==0 or self.s2[-1] > node:
            self.s2.append(node)
        else:
            self.s2.append(self.s2[-1])
    def pop(self):
        # write code here
        self.s1.pop()
        self.s2.pop()
    def top(self):
        # write code here
        return self.s1[-1]
    def min(self):
        # write code here
        return self.s2[-1]
