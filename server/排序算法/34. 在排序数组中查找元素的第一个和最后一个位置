"""
https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/
给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。
如果数组中不存在目标值 target，返回 [-1, -1]。
你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题。

示例 1：
输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]

示例 2：
输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]

示例 3：
输入：nums = [], target = 0
输出：[-1,-1]
"""
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums) == 0:
            return [-1, -1]
        elif nums[0] > target:
            return [-1, -1]
        elif nums[-1] < target:
            return [-1, -1]
        left = self.search_left(nums, target)
        right = self.search_right(nums, target)
        return [left, right]

        
    def search_left(self, nums, k):
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] > k:
                right = mid -1
            elif nums[mid] < k:
                left = mid + 1
            elif nums[mid] == k:
                right = mid - 1

        if nums[left] != k:
            return -1
        
        return left
    
    def search_right(self, nums, k):
        left = 0
        right = len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] > k:
                right = mid -1
            elif nums[mid] < k:
                left = mid + 1
            elif nums[mid] == k:
                left = mid + 1
        
        if nums[right] != k:
            return -1

        return right
