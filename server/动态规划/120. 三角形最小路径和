"""
https://leetcode.cn/problems/triangle/
给定一个三角形 triangle ，找出自顶向下的最小路径和。
每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。

示例 1：

输入：triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
输出：11
解释：如下面简图所示：
   2
  3 4
 6 5 7
4 1 8 3
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

解析：
动态规划问题+杨辉三角问题。
杨辉三角问题参考：
https://github.com/Letdreamfly/LeetCode-Daily/blob/main/server/%E5%88%86%E6%9E%90%E6%B3%95/119.%20%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%20II
"""
class Solution(object):
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        res = triangle[0]
        for i in range(1, len(triangle)):
            tmp = triangle[i]
            for j in range(i+1):
                if j == 0:
                    tmp[j] += res[0]
                elif j == i:
                    tmp[j] += res[-1]
                else:
                    tmp[j] += min(res[j], res[j-1])
            res = tmp
        return min(res)
