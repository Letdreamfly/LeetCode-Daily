"""
https://leetcode.cn/problems/maximum-subarray/
给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
子数组 是数组中的一个连续部分。

示例 1：
输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
输出：6
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。

示例 2：
输入：nums = [1]
输出：1

解析：
动态规划问题，设置一个for循环，在每一个位置判断上一个子数组的值，如果上一个子数组大于0，那么子数组依次续上；否则，新的子数组可以从当前位置重新开始。
然后在每一步分别判断临时最大值与全局最大值的大小即可。
"""
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = nums[0]
        tmp_sum = 0

        for i in range(len(nums)):
            tmp_sum = max(tmp_sum+nums[i], nums[i])
            max_sum = max(max_sum, tmp_sum)

        return max_sum
        
       
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = nums[0]
        tmp_sum = 0

        for i in range(len(nums)):
            if tmp_sum <= 0:
                tmp_sum = nums[i]
            else:
                tmp_sum = tmp_sum + nums[i]
            max_sum = max(max_sum, tmp_sum)

        return max_sum
            
